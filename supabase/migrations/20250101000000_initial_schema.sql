/*
# Initial Schema for Market Management System
This migration sets up the complete database structure for the application.

## Query Description: 
This script creates all necessary tables, types, and relationships for managing employees, customers, products, and sales. It establishes a solid foundation for the application's data layer. There is no risk to existing data as this is the initial schema setup.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "High"
- Requires-Backup: false
- Reversible: false

## Structure Details:
- **Types**: `employee_role`
- **Tables**: `employees`, `customers`, `categories`, `products`, `sales`, `sale_items`
- **Relationships**: Foreign keys are established between tables (e.g., `sales` to `employees` and `customers`, `products` to `categories`).
- **Functions**: A trigger function `handle_new_user` is created to automatically create an employee profile when a new user signs up via Supabase Auth.

## Security Implications:
- RLS Status: Enabled on all tables.
- Policy Changes: Initial policies are created to grant access based on roles.
  - Admins have full access.
  - Authenticated users (employees) have read access to most tables and write access to sales-related tables.
- Auth Requirements: A trigger connects `auth.users` to the public `employees` table.

## Performance Impact:
- Indexes: Primary keys and foreign keys are indexed by default. A unique index is added to `customers.phone_number`.
- Triggers: One trigger is added to handle new user creation. The impact is minimal and only occurs on user sign-up.
- Estimated Impact: Low performance impact. The structure is optimized for common query patterns.
*/

-- 1. Create custom types
CREATE TYPE public.employee_role AS ENUM ('admin', 'cashier');

-- 2. Create Employees Table
-- This table stores employee information and links to Supabase Auth.
CREATE TABLE public.employees (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid references auth.users(id) on delete cascade unique,
    full_name text NOT NULL,
    role public.employee_role NOT NULL DEFAULT 'cashier',
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.employees IS 'Stores employee profiles and their roles.';

-- 3. Create Customers Table
CREATE TABLE public.customers (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name text NOT NULL,
    phone_number text UNIQUE,
    address text,
    loan_balance numeric(12, 2) NOT NULL DEFAULT 0.00,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.customers IS 'Stores customer information and their loan balance.';

-- 4. Create Categories Table
CREATE TABLE public.categories (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL UNIQUE,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.categories IS 'Stores product categories.';

-- 5. Create Products Table
CREATE TABLE public.products (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    barcode text UNIQUE,
    category_id uuid references public.categories(id) on delete set null,
    stock_quantity integer NOT NULL DEFAULT 0,
    purchase_price numeric(12, 2) NOT NULL,
    sale_price numeric(12, 2) NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.products IS 'Stores inventory/product information.';

-- 6. Create Sales Table
CREATE TABLE public.sales (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    employee_id uuid NOT NULL references public.employees(id),
    customer_id uuid references public.customers(id),
    total_amount numeric(12, 2) NOT NULL,
    payment_method text NOT NULL CHECK (payment_method IN ('cash', 'loan')),
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.sales IS 'Records every sale transaction.';

-- 7. Create Sale Items Table
CREATE TABLE public.sale_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sale_id uuid NOT NULL references public.sales(id) on delete cascade,
    product_id uuid NOT NULL references public.products(id),
    quantity integer NOT NULL,
    price_at_sale numeric(12, 2) NOT NULL
);
COMMENT ON TABLE public.sale_items IS 'Stores individual items within a sale.';

-- 8. Create a function to handle new user sign-ups
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.employees (user_id, full_name)
  values (new.id, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$;

-- 9. Create a trigger to call the function on new user creation
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- 10. Enable Row Level Security (RLS) for all tables
ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sale_items ENABLE ROW LEVEL SECURITY;

-- 11. Create RLS Policies

-- Helper function to get the role of the current user
CREATE OR REPLACE FUNCTION public.get_my_role()
RETURNS public.employee_role
LANGUAGE sql
STABLE
AS $$
  SELECT role FROM public.employees WHERE user_id = auth.uid();
$$;

-- Policies for `employees` table
CREATE POLICY "Allow admin to manage employees" ON public.employees
    FOR ALL USING (public.get_my_role() = 'admin');
CREATE POLICY "Allow employees to view their own profile" ON public.employees
    FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "Allow employees to view other employees" ON public.employees
    FOR SELECT USING (true);


-- Policies for `customers` table
CREATE POLICY "Allow all employees to manage customers" ON public.customers
    FOR ALL USING (true);

-- Policies for `categories` table
CREATE POLICY "Allow admin to manage categories" ON public.categories
    FOR ALL USING (public.get_my_role() = 'admin');
CREATE POLICY "Allow all employees to view categories" ON public.categories
    FOR SELECT USING (true);

-- Policies for `products` table
CREATE POLICY "Allow admin to manage products" ON public.products
    FOR ALL USING (public.get_my_role() = 'admin');
CREATE POLICY "Allow all employees to view products" ON public.products
    FOR SELECT USING (true);

-- Policies for `sales` and `sale_items` tables
CREATE POLICY "Allow all employees to manage sales" ON public.sales
    FOR ALL USING (true);
CREATE POLICY "Allow all employees to manage sale items" ON public.sale_items
    FOR ALL USING (true);
